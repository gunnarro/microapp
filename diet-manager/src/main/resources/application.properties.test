# application
application.name=@project.build.finalName@
application.version=@project.version@
application.build.time=@build.timestamp@
banner.location=classpath:banner.txt

spring.application.name=provision-service
server.servlet.application-display-name=provision-service
server.servlet.session.timeout=36000

# servlet
servlet.name=dietmanager
servlet.mapping=/dietmanager

# tomcat https://docs.spring.io/spring-boot/docs/current/reference/html/common-application-properties.html
# endpoints.cors.allowed-methods=GET,POST,HEAD,OPTIONS,PUT

# server
server.contextPath=/dietmanager
server.compression.enabled=true
server.error.whitelabel.enabled=false

# Using ssl configuration means the application no longer supports a plain HTTP connector at server port
# SSL Configuration, Support only SSL 1.2, Disabled
# ----------------------
server.port=8080
server.ssl.enabled=${SERVER_SSL_ENABLED}
#server.ssl.key-store=classpath:${KEYSTORE_NAME}
server.ssl.key-store=classpath:${KEYSTORE_NAME}
server.ssl.key-store-password=${KEYSTORE_PASS}
server.ssl.key-password=${KEYSTORE_PASS}
server.ssl.key-alias=${KEYSTORE_ALIAS}

# ssl ciphers
#server.ssl.ciphers=TLS_RSA_WITH_AES_128_CBC_SHA256
server.ssl.ciphers=TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_DHE_RSA_WITH_AES_128_GCM_SHA256,TLS_DHE_DSS_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_128_SHA256,TLS_ECDHE_ECDSA_WITH_AES_128_SHA256,TLS_ECDHE_RSA_WITH_AES_128_SHA,TLS_ECDHE_ECDSA_WITH_AES_128_SHA,TLS_ECDHE_RSA_WITH_AES_256_SHA384,TLS_ECDHE_ECDSA_WITH_AES_256_SHA384,TLS_ECDHE_RSA_WITH_AES_256_SHA,TLS_ECDHE_ECDSA_WITH_AES_256_SHA,TLS_DHE_RSA_WITH_AES_128_SHA256,TLS_DHE_RSA_WITH_AES_128_SHA,TLS_DHE_DSS_WITH_AES_128_SHA256,TLS_DHE_RSA_WITH_AES_256_SHA256,TLS_DHE_DSS_WITH_AES_256_SHA,TLS_DHE_RSA_WITH_AES_256_SHA

# ssl protocol to use.
server.ssl.protocol=TLS

# Enabled ssl protocols.
server.ssl.enabled-protocols=TLSv1.2
# ------------------------------------

# thymeleaf
# spring.thymeleaf.enabled=true
# spring.thymeleaf.check-template=true
# spring.thymeleaf.check-template-location=true
# spring.thymeleaf.prefix=/templates/
# spring.thymeleaf.suffix=.html
spring.thymeleaf.encoding=UTF-8
# spring.thymeleaf.content-type=text/html
spring.thymeleaf.cache=false

# spring
spring.messages.basename=i18n/messages

#jdbc.url=${JDBC_URL}
#jdbc.user=${JDBC_USER}
#jdbc.pwd=${JDBC_PWD}
#jdbc.driverClassName=com.mysql.jdbc.Driver

# used by gcp auto configuration
#spring.datasource.url=${JDBC_URL}
spring.datasource.username=${JDBC_USER} 	
spring.datasource.password=${JDBC_PWD}
#spring.datasource.driver-class-name=com.mysql.jdbc.Driver
# So app starts despite "table already exists" errors.
#spring.datasource.continue-on-error=true
# Enforces database initialization
spring.datasource.initialization-mode=always
spring.datasource.hikari.maximum-pool-size=2


# for Cloud sql
database=${GCP_SQL_DATABASE_TYPE}
spring.cloud.gcp.sql.database-name=${GCP_SQL_DATABASE_NAME}
spring.cloud.gcp.sql.instance-connection-name=${GCP_SQL_INSTANCE_CONNECTION_NAME}
#spring.datasource.initialization-mode=always



#spring.cloud.gcp.sql.enabled=false
#spring.cloud.gcp.project-id=big-genre-214416
#spring.cloud.gcp.sql.database-name=microdb
#spring.cloud.gcp.sql.instance-connection-name=big-genre-214416:europe-north1:microdb
#spring.cloud.gcp.sql.credentials.location=file:${GCP_CREDENTIALS_PATH}
spring.cloud.gcp.credentials.location=file:${GCP_CREDENTIALS_PATH}


# for fileupload
spring.servlet.multipart.max-file-size=${FILE_UPLOAD_SIZE}
spring.servlet.multipart.max-request-size=${FILE_UPLOAD_SIZE}
fileupload.root.dir=${FILE_UPLOAD_ROOT_DIR}
