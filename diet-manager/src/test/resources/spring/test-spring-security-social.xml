<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xmlns:security="http://www.springframework.org/schema/security"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
                           http://www.springframework.org/schema/beans/spring-beans.xsd
                           http://www.springframework.org/schema/security
                           http://www.springframework.org/schema/security/spring-security.xsd">

	<!-- Enable use of secured annotation -->
	<security:global-method-security pre-post-annotations="enabled"/>
	
 	 <!--  authentication manager and its provider( social provider deals with social login & local user provider deals with form login ) -->
    <security:authentication-manager alias="authenticationManager">
        <security:authentication-provider ref="socialAuthenticationProvider"/>
        <security:authentication-provider user-service-ref="localUserDetailsService">
        	<security:password-encoder ref="pwdEncoder"/>
        </security:authentication-provider>
    </security:authentication-manager>

    <bean id="socialAuthenticationProvider" class="org.springframework.social.security.SocialAuthenticationProvider">
        <constructor-arg ref="jdbcUsersConnectionRepository"/>
        <constructor-arg ref="socialUserDetailsService"/>
    </bean>

    <!-- form login beans -->
    <bean id="appAuthenticationEntryPoint" class="com.gunnarro.dietmanager.mvc.controller.AppAuthenticationEntryPoint">
        <constructor-arg name="loginFormUrl" value="/login"/>
    </bean>
     
    <bean id="successHandler" class="com.gunnarro.dietmanager.handler.AppSuccessHandler"/>
    
    <bean id="logoutSuccessHandler" class="org.springframework.security.web.authentication.logout.SimpleUrlLogoutSuccessHandler"/>
    <bean id="rememberMeServices" class="org.springframework.security.web.authentication.NullRememberMeServices"/>
    <bean id="failureHandler" class="org.springframework.security.web.authentication.SimpleUrlAuthenticationFailureHandler">
        <constructor-arg name="defaultFailureUrl" value="/access-denied"/>
    </bean>
    
    <bean id="logoutFilter" class="org.springframework.security.web.authentication.logout.LogoutFilter">
        <constructor-arg name="logoutSuccessHandler" ref="logoutSuccessHandler"/>
        <constructor-arg name="handlers">
            <list>
                <bean name="securityContextLogoutHandler" class="org.springframework.security.web.authentication.logout.SecurityContextLogoutHandler"/>
            </list>
        </constructor-arg>
    </bean>
    
    <bean id="SecurityAuthFilter" class="org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter">
        <property name="authenticationManager" ref="authenticationManager"/>
        <property name="authenticationSuccessHandler" ref="successHandler"/>
        <property name="authenticationFailureHandler" ref="failureHandler"/>
        <property name="filterProcessesUrl" value="/j_spring_security_check"/>
        <property name="rememberMeServices" ref="rememberMeServices"/>
    </bean>

    <!-- Anyone can access these urls -->
    <security:http pattern="/resources/**" security="none" />
    <security:http pattern="/webjars/**" security="none" />
    <security:http pattern="/login" security="none"/>
    <security:http pattern="/access-denied" security="none"/>
    <security:http pattern="/signup" security="none"/>
    <security:http pattern="/register/**" security="none"/>

    <security:http use-expressions="true" entry-point-ref="appAuthenticationEntryPoint" >
    	<security:csrf disabled="true"/>
        <security:intercept-url pattern="/auth/**" access="permitAll"/>
        <security:intercept-url pattern="/j_spring_security_check" access="permitAll"/>
        <security:intercept-url pattern="/" access="isAuthenticated()"/>
        <security:intercept-url pattern="/**" access="isAuthenticated()"/>
        <!-- Adds social authentication filter to the Spring Security filter chain. -->
        <security:custom-filter before="PRE_AUTH_FILTER" ref="socialAuthenticationFilter"/>
        <security:custom-filter position="FORM_LOGIN_FILTER" ref="SecurityAuthFilter"/>
        <security:custom-filter position="LOGOUT_FILTER" ref="logoutFilter"/>
    </security:http>

    <!-- social login filter which is a pre authentication filter and works for /auth service url -->
    <bean id="socialAuthenticationFilter" class="org.springframework.social.security.SocialAuthenticationFilter">
        <constructor-arg name="authManager" ref="authenticationManager"/>
        <constructor-arg name="userIdSource" ref="userIdSource"/>
        <constructor-arg name="usersConnectionRepository" ref="jdbcUsersConnectionRepository"/>
        <constructor-arg name="authServiceLocator" ref="appSocialAuthenticationServiceRegistry"/>
        <property name="authenticationSuccessHandler" ref="successHandler"/>
    </bean>

     <bean id="textEncryptor" class="com.gunnarro.dietmanager.spring.custom.security.NoOpTextEncryptor" />
     
     <bean id="jdbcUsersConnectionRepository" class="com.gunnarro.dietmanager.repository.impl.CustomJdbcUsersConnectionRepository" >
		<constructor-arg ref="dietManagerDataSource_junit" />
		<constructor-arg name="connectionFactoryLocator" ref="appSocialAuthenticationServiceRegistry"/>
		<constructor-arg ref="textEncryptor" />
	</bean>
     
    <!-- inmemory connection repository which holds connection repository per local user -->
 	<!-- 
     <bean id="inMemoryUsersConnectionRepository" class="org.springframework.social.connect.mem.InMemoryUsersConnectionRepository">
        <constructor-arg name="connectionFactoryLocator" ref="appSocialAuthenticationServiceRegistry"/>
        <property name="connectionSignUp" ref="connectionSignUp"/>
    </bean>
  	-->
     
	<!-- If no local user is associated to a social connection then connection sign up will create a new local user and map it to social user -->
    <!-- 
    <bean id="connectionSignUp" class="com.gunnarro.dietmanager.service.impl.AppConnectionSignUp"/>
     -->
     
    <!-- service registry will holds connection factory of each social provider -->
    <bean id="appSocialAuthenticationServiceRegistry" class="com.gunnarro.dietmanager.service.impl.AppSocialAuthenticationServiceRegistry">
        <constructor-arg>
            <list>
                <ref bean="facebookAuthenticationService"/>
                <!-- 
                <ref bean="githubAuthenticationService"/>
                <ref bean="twitterAuthenticationService"/>
                <ref bean="linkedInAuthenticationService"/>
                <ref bean="googleAuthenticationService"/>
                -->
            </list>
        </constructor-arg>
    </bean>

    <bean id="facebookAuthenticationService" class="org.springframework.social.facebook.security.FacebookAuthenticationService">
        <constructor-arg name="apiKey" value="1113181278779457"/>
        <constructor-arg name="appSecret" value="789d646ff18505732c3a2b591662a700"/>
    </bean>

	<!-- 
	<bean id="githubAuthenticationService" class="org.springframework.social.github.security.GitHubAuthenticationService">
        <constructor-arg name="apiKey" value="95d67154b86b4ee2bb06"/>
        <constructor-arg name="appSecret" value="86bf0714e877559c58a1113e0d0278729e5b5dea"/>
    </bean>
     -->
	<!-- 
    <bean id="twitterAuthenticationService" class="org.springframework.social.twitter.security.TwitterAuthenticationService">
        <constructor-arg name="apiKey" value="${twitter.api.key}"/>
        <constructor-arg name="appSecret" value="${twitter.api.secret}"/>
    </bean>

    <bean id="linkedInAuthenticationService" class="org.springframework.social.linkedin.security.LinkedInAuthenticationService">
        <constructor-arg name="apiKey" value="${linkedin.api.key}"/>
        <constructor-arg name="appSecret" value="${linkedin.api.secret}"/>
    </bean>

    <bean id="googleAuthenticationService" class="org.springframework.social.google.security.GoogleAuthenticationService">
        <constructor-arg name="apiKey" value="${google.api.key}"/>
        <constructor-arg name="appSecret" value="${google.api.secret}"/>
    </bean>
 -->
 
    <bean id="userIdSource" class="org.springframework.social.security.AuthenticationNameUserIdSource"/>
	
	<bean id="pwdEncoder" class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder">
		<constructor-arg type="int" value="13" />
	</bean>
</beans>