#spring.datasource.initialize=true
#spring.datasource.schema=h2-schema.sql
#spring.datasource.data=h2-data.sql


# Using ssl configuration means the application no longer supports a plain HTTP connector at server port
# SSL Configuration, Support only SSL 1.2, Disabled
# ----------------------
server.port=9080
server.ssl.enabled=true
server.ssl.key-store=src/test/resources/gunnarro-identity.jks
server.ssl.key-store-password=ABcd2o1o
server.ssl.key-password=ABcd2o1o
server.ssl.key-alias=gunnarro

# ssl ciphers
#server.ssl.ciphers=TLS_RSA_WITH_AES_128_CBC_SHA256
server.ssl.ciphers=TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_DHE_RSA_WITH_AES_128_GCM_SHA256,TLS_DHE_DSS_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_128_SHA256,TLS_ECDHE_ECDSA_WITH_AES_128_SHA256,TLS_ECDHE_RSA_WITH_AES_128_SHA,TLS_ECDHE_ECDSA_WITH_AES_128_SHA,TLS_ECDHE_RSA_WITH_AES_256_SHA384,TLS_ECDHE_ECDSA_WITH_AES_256_SHA384,TLS_ECDHE_RSA_WITH_AES_256_SHA,TLS_ECDHE_ECDSA_WITH_AES_256_SHA,TLS_DHE_RSA_WITH_AES_128_SHA256,TLS_DHE_RSA_WITH_AES_128_SHA,TLS_DHE_DSS_WITH_AES_128_SHA256,TLS_DHE_RSA_WITH_AES_256_SHA256,TLS_DHE_DSS_WITH_AES_256_SHA,TLS_DHE_RSA_WITH_AES_256_SHA

# ssl protocol to use.
server.ssl.protocol=TLS

# Enabled ssl protocols.
server.ssl.enabled-protocols=TLSv1.2

# jdbc
jdbc.url=jdbc:h2:mem:dietmanager_unit_test;MODE=MySQL;DB_CLOSE_DELAY=-1;DB_CLOSE_ON_EXIT=FALSE;IGNORECASE=TRUE
jdbc.user=SA
jdbc.pwd=

mariaDB4j.dataDir=

spring.datasource.url=jdbc:mysql://localhost/microdb
spring.datasource.username=root
spring.datasource.password=ABcd2o1o
spring.datasource.driver-class-name=com.mysql.jdbc.Driver

# So app starts despite "table already exists" errors.
spring.datasource.continue-on-error=true
# Enforces database initialization
spring.datasource.initialization-mode=always
spring.datasource.sqlScriptEncoding=UTF-8
spring.datasource.initialization-mode=always

# for Cloud sql
spring.cloud.gcp.sql.enabled=true
spring.cloud.gcp.project-id=microapp
spring.cloud.gcp.sql.database-name=microdb
spring.cloud.gcp.sql.instance-connection-name=big-genre-214416:europe-north1:microdb
spring.cloud.gcp.sql.credentials.location=file:./src/main/resources/cloudsql-microdb.json
spring.cloud.gcp.credentials.location=file:./src/main/resources/cloudsql-microdb.json

#useSSL=false
#database=mysql
cloudsql.jdbc.instance.connection.name=big-genre-214416:europe-north1:microdb
cloudsql.jdbc.socketfactory=com.google.cloud.sql.mysql.SocketFactory
cloudsql.jdbc.driverClassName=com.mysql.jdbc.Driver
cloudsql.jdbc.url=jdbc:mysql://35.228.155.125/microdb?cloudSqlInstance=big-genre-214416:europe-north1:microdb
cloudsql.jdbc.username=
cloudsql.jdbc.pwd=

#jdbc:mysql://google/<DATABASE_NAME>?cloudSqlInstance=<INSTANCE_CONNECTION_NAME>&socketFactory=com.google.cloud.sql.mysql.SocketFactory&useSSL=false&user=<MYSQL_USER_NAME>&password=<MYSQL_USER_PASSWORD>
cloudsql.jdbc.url2=jdbc:mysql://google/microdb?cloudSqlInstance=big-genre-214416:europe-north1:microdb&socketFactory=com.google.cloud.sql.mysql.SocketFactory&useSSL=false&user=root&password=ABcd2o1o
#spring.datasource.url=jdbc:mysql://google/database?cloudSqlInstance=spring-test:us-central1:spring-main=com.google.cloud.sql.mysql.SocketFactory
#spring.datasource.url=jdbc:mysql://###.#.#.#/database?cloudSqlInstance=spring-test:us-central1:spring-main=com.google.cloud.sql.mysql.SocketFactory

fileupload.root.dir=data

# facebook provider details
facebook.api.key=1113181278779457
facebook.api.secret=789d646ff18505732c3a2b591662a700

# twitter provider details
twitter.api.key=
twitter.api.secret=

# linkedin provider details
linkedin.api.key=
linkedin.api.secret=

# github provider details
github.api.key=
github.api.secret=
