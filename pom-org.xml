<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">

	<!-- Inherit defaults from Spring Boot -->
	<!-- <parent> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-parent</artifactId> 
		<version>1.2.0.RELEASE</version> </parent> -->

	<modelVersion>4.0.0</modelVersion>
	<groupId>com.gunnarro.sportsteam</groupId>
	<artifactId>sportsteam</artifactId>
	<packaging>war</packaging>
	<version>1.0-SNAPSHOT</version>
	<name>Sportsteam management</name>

	<!-- Run DB update: -->
	<!-- mvn resources:resources liquibase:update -P DBSystemTest -->

	<!-- WSDL generate from wsdl debug: -X -->
	<!-- mvn -X clean jaxb2:xjc -->

	<properties>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<build.timestamp>${maven.build.timestamp}</build.timestamp>
		<main.basedir>${basedir}/../..</main.basedir>
		<m2eclipse.wtp.contextRoot>/</m2eclipse.wtp.contextRoot>
		<!-- in order to show version number in jsp -->
		<version.sportsteamVersion>${project.version}</version.sportsteamVersion>
		<!-- in order to show build time in jsp -->
		<maven.compiler.source>1.7</maven.compiler.source>
		<maven.compiler.target>1.7</maven.compiler.target>
		<version.liquibase>3.4.0</version.liquibase>
		<version.spring>4.2.1.RELEASE</version.spring>
		<version.spring.security>4.0.2.RELEASE</version.spring.security>
		<version.spring.webflow>2.4.0.RELEASE</version.spring.webflow>
		<!-- <version.hibernate>4.2.13.Final</version.hibernate> -->
		<!-- Spring Third Party dependencies -->
		<version.aopalliance>1.0</version.aopalliance>
		<!-- <version.aspectj>1.7.4</version.aspectj> -->
		<!-- <version.slf4j>1.7.5</version.slf4j> -->
		<version.jackson.databind>2.2.3</version.jackson.databind>
		<version.jackson>1.9.3</version.jackson>

		<!-- Third Party dependencies -->
		<version.standard.taglibs>1.1.2</version.standard.taglibs>
		<version.commons.logging>1.1.1</version.commons.logging>

		<!-- Web dependencies -->
		<webjars-bootstrap.version>3.3.6</webjars-bootstrap.version>
		<webjars-jquery-ui.version>1.11.4</webjars-jquery-ui.version>
		<webjars-jquery.version>2.2.3</webjars-jquery.version>
		<dandelion.version>0.10.1</dandelion.version>

		<!-- javax -->
		<version.javax.mail.api>1.5.2</version.javax.mail.api>
		<version.javax.mail>1.5.0-b01</version.javax.mail>

		<!-- Logging -->
		<logback.version>1.1.3</logback.version>
		<slf4j.version>1.7.12</slf4j.version>

		<!-- apache poi -->
		<version.apache.poi>3.12</version.apache.poi>

		<db.driver>com.mysql.jdbc.Driver</db.driver>
		<db.url>jdbc:mysql://localhost:3306/sportsteam</db.url>
		<db.username>root</db.username>
		<db.password>mysql</db.password>
	</properties>

	<dependencyManagement>
		<dependencies>
			<!-- Define the version of JBoss' Java EE 6 APIs we want to import. Any 
				dependencies from org.jboss.spec will have their version defined by this 
				BOM -->
			<!-- JBoss distributes a complete set of Java EE 6 APIs including a Bill 
				of Materials (BOM). A BOM specifies the versions of a "stack" (or a collection) 
				of artifacts. We use this here so that we always get the correct versions 
				of artifacts. Here we use the jboss-javaee-web-6.0 stack (you can read this 
				as the JBoss stack of the Java EE Web Profile 6 APIs), and we use version 
				3.0.0.Final which is the latest release of the stack. You can actually use 
				this stack with any version of JBoss AS that implements Java EE 6, not just 
				JBoss AS 7! -->
			<dependency>
				<groupId>org.jboss.spec</groupId>
				<artifactId>jboss-javaee-web-6.0</artifactId>
				<version>3.0.0.Final</version>
				<type>pom</type>
				<scope>import</scope>
			</dependency>
		</dependencies>
	</dependencyManagement>

	<dependencies>
		<!-- <dependency> <groupId>org.postgresql</groupId> <artifactId>postgresql</artifactId> 
			<version>9.2-1003-jdbc4</version> </dependency> -->
		<!-- <dependency> <groupId>mysql</groupId> <artifactId>mysql-connector-java</artifactId> 
			<version>5.1.25</version> </dependency> -->
		<dependency>
			<groupId>org.hsqldb</groupId>
			<artifactId>hsqldb</artifactId>
			<version>2.3.2</version>
			<scope>runtime</scope>
		</dependency>

		<!-- Import the JPA API using the provided scope It is included in JBoss 
			AS 7 / EAP 6 -->
		<!-- <dependency> <groupId>org.hibernate.javax.persistence</groupId> <artifactId>hibernate-jpa-2.0-api</artifactId> 
			</dependency> -->
		<!-- JSR-303 (Bean Validation) Implementation -->
		<!-- Provides portable constraints such as @Email -->
		<!-- Hibernate Validator is shipped in JBoss AS 7 -->
		<!-- <dependency> <groupId>org.hibernate</groupId> <artifactId>hibernate-validator</artifactId> 
			<version>${version.hibernate}</version> <exclusions> <exclusion> <groupId>org.slf4j</groupId> 
			<artifactId>slf4j-api</artifactId> </exclusion> </exclusions> </dependency> -->
		<!-- Annotation processor that raising compilation errors whenever constraint 
			annotations are incorrectly used. -->
		<!-- <dependency> <groupId>org.hibernate</groupId> <artifactId>hibernate-validator-annotation-processor</artifactId> 
			<version>${version.hibernate}</version> </dependency> -->

		<!-- <dependency> <groupId>org.hibernate</groupId> <artifactId>hibernate-entitymanager</artifactId> 
			<version>${version.hibernate}</version> </dependency> -->
		<!-- Import Spring dependencies, these are either from community or versions 
			certified in WFK2 -->

		<!-- Javax servlet -->
		<dependency>
			<groupId>javax.servlet</groupId>
			<artifactId>jstl</artifactId>
			<version>1.2</version>
		</dependency>
		<dependency>
			<groupId>javax.servlet</groupId>
			<artifactId>javax.servlet-api</artifactId>
			<version>3.1.0</version>
		</dependency>
		<!-- Spring framework -->
		<!-- <dependency> <groupId>org.springframework</groupId> <artifactId>spring-aop</artifactId> 
			<version>${version.spring}</version> </dependency> -->
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-beans</artifactId>
			<version>${version.spring}</version>
		</dependency>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-context</artifactId>
			<version>${version.spring}</version>
			<exclusions>
				<exclusion>
					<!-- for using logback -->
					<groupId>commons-logging</groupId>
					<artifactId>commons-logging</artifactId>
				</exclusion>
			</exclusions>
		</dependency>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-context-support</artifactId>
			<version>${version.spring}</version>
		</dependency>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-core</artifactId>
			<version>${version.spring}</version>
			<exclusions>
				<exclusion>
					<groupId>commons-logging</groupId>
					<artifactId>commons-logging</artifactId>
				</exclusion>
			</exclusions>
		</dependency>
		<!-- 
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-expression</artifactId>
			<version>${version.spring}</version>
		</dependency>
		 -->
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-jdbc</artifactId>
			<version>${version.spring}</version>
		</dependency>
		<!-- <dependency> <groupId>org.springframework</groupId> <artifactId>spring-orm</artifactId> 
			<version>${version.spring}</version> </dependency> -->
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-tx</artifactId>
			<version>${version.spring}</version>
		</dependency>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-web</artifactId>
			<version>${version.spring}</version>
		</dependency>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-webmvc</artifactId>
			<version>${version.spring}</version>
		</dependency>
		<!-- Spring webflow -->
		<!-- <dependency> <groupId>org.springframework.webflow</groupId> <artifactId>spring-webflow</artifactId> 
			<version>${version.spring.webflow}</version> </dependency> -->
		<!-- Spring Security -->
		<dependency>
			<groupId>org.springframework.security</groupId>
			<artifactId>spring-security-core</artifactId>
			<version>${version.spring.security}</version>
		</dependency>
		<dependency>
			<groupId>org.springframework.security</groupId>
			<artifactId>spring-security-config</artifactId>
			<version>${version.spring.security}</version>
			<scope>compile</scope>
		</dependency>
		<dependency>
			<groupId>org.springframework.security</groupId>
			<artifactId>spring-security-web</artifactId>
			<version>${version.spring.security}</version>
		</dependency>
		<dependency>
			<groupId>org.springframework.security</groupId>
			<artifactId>spring-security-taglibs</artifactId>
			<version>${version.spring.security}</version>
			<scope>compile</scope>
		</dependency>
		<dependency>
			<groupId>joda-time</groupId>
			<artifactId>joda-time</artifactId>
			<version>2.9.1</version>
		</dependency>

		<!-- liquibase -->
		<dependency>
			<groupId>org.liquibase</groupId>
			<artifactId>liquibase-core</artifactId>
			<version>${version.liquibase}</version>
		</dependency>

		<!-- MySQL Driver -->
		<dependency>
			<groupId>mysql</groupId>
			<artifactId>mysql-connector-java</artifactId>
			<version>5.0.5</version>
		</dependency>

		<!-- Other community dependencies -->
		<!-- 
		<dependency>
			<groupId>aopalliance</groupId>
			<artifactId>aopalliance</artifactId>
			<version>${version.aopalliance}</version>
		</dependency>
		 -->
		 <!-- 
		<dependency>
			<groupId>taglibs</groupId>
			<artifactId>standard</artifactId>
			<version>${version.standard.taglibs}</version>
		</dependency>
		 -->
		<!-- Add JSON dependency, specified in jboss-deployment-structure.xml -->
		<dependency>
			<groupId>com.fasterxml.jackson.core</groupId>
			<artifactId>jackson-annotations</artifactId>
			<version>${version.jackson.databind}</version>
			<scope>compile</scope>
		</dependency>
		<dependency>
			<groupId>com.fasterxml.jackson.core</groupId>
			<artifactId>jackson-databind</artifactId>
			<version>${version.jackson.databind}</version>
		</dependency>
		<!-- <dependency> <groupId>org.codehaus.jackson</groupId> <artifactId>jackson-mapper-asl</artifactId> 
			<version>${version.jackson}</version> <scope>provided</scope> </dependency> 
			<dependency> <groupId>org.codehaus.jackson</groupId> <artifactId>jackson-core-asl</artifactId> 
			<version>${version.jackson}</version> <scope>provided</scope> </dependency> -->

		<!-- Logging with SLF4J & LogBack -->
		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>slf4j-api</artifactId>
			<version>${slf4j.version}</version>
		</dependency>
		<!-- for spring -->
		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>jcl-over-slf4j</artifactId>
			<version>1.7.5</version>
			<scope>runtime</scope>
		</dependency>
		<dependency>
			<groupId>ch.qos.logback</groupId>
			<artifactId>logback-core</artifactId>
			<version>${logback.version}</version>
		</dependency>
		<dependency>
			<groupId>ch.qos.logback</groupId>
			<artifactId>logback-classic</artifactId>
			<version>${logback.version}</version>
		</dependency>
		<!-- Webjars (static dependencies distributed as JAR files) -->
		<dependency>
			<groupId>org.webjars</groupId>
			<artifactId>bootstrap</artifactId>
			<version>${webjars-bootstrap.version}</version>
			<scope>compile</scope>
		</dependency>
		<dependency>
			<groupId>org.webjars</groupId>
			<artifactId>jquery-ui</artifactId>
			<version>${webjars-jquery-ui.version}</version>
		</dependency>
		<dependency>
			<groupId>org.webjars</groupId>
			<artifactId>jquery</artifactId>
			<version>${webjars-jquery.version}</version>
		</dependency>
		<!-- Dandelion -->
		<dependency>
			<groupId>com.github.dandelion</groupId>
			<artifactId>dandelion-core</artifactId>
			<version>${dandelion.version}</version>
			<scope>compile</scope>
		</dependency>
		<dependency>
			<groupId>com.github.dandelion</groupId>
			<artifactId>datatables-jsp</artifactId>
			<version>${dandelion.version}</version>
		</dependency>
		<dependency>
			<groupId>com.github.dandelion</groupId>
			<artifactId>datatables-export-itext</artifactId>
			<version>${dandelion.version}</version>
			<scope>compile</scope>
		</dependency>
		<!-- java planner -->
		<!-- have to be put manuall into local mvn repo <dependency> <groupId>com.dhtmlx</groupId> 
			<artifactId>javaplanner</artifactId> <version>1.5</version> </dependency> -->
		<dependency>
			<groupId>javassist</groupId>
			<artifactId>javassist</artifactId>
			<version>3.12.1.GA</version>
		</dependency>
		<!-- <dependency> <groupId>org.apache.velocity</groupId> <artifactId>velocity</artifactId> 
			<version>1.7</version> </dependency> -->
		<!-- Apache Commons FileUpload -->
		<dependency>
			<groupId>commons-fileupload</groupId>
			<artifactId>commons-fileupload</artifactId>
			<version>1.3.1</version>
		</dependency>
		<!-- Apache -->
		<dependency>
			<groupId>org.apache.commons</groupId>
			<artifactId>commons-collections4</artifactId>
			<version>4.0</version>
		</dependency>
		<dependency>
			<groupId>org.apache.commons</groupId>
			<artifactId>commons-lang3</artifactId>
			<version>3.4</version>
		</dependency>
		<!-- <dependency> <groupId>javax.mail</groupId> <artifactId>javax.mail-api</artifactId> 
			<version>${version.javax.mail.api}</version> </dependency> -->
		<dependency>
			<groupId>javax.mail</groupId>
			<artifactId>mail</artifactId>
			<version>${version.javax.mail}</version>
		</dependency>
		<!-- javax validation -->
		<dependency>
			<groupId>javax.validation</groupId>
			<artifactId>validation-api</artifactId>
			<version>1.1.0.Final</version>
		</dependency>
		<!-- javax validation needs the hibernate reference implementation -->
		<dependency>
			<groupId>org.hibernate</groupId>
			<artifactId>hibernate-validator</artifactId>
			<version>5.1.1.Final</version>
		</dependency>
		<dependency>
			<groupId>org.glassfish.web</groupId>
			<artifactId>el-impl</artifactId>
			<version>2.2</version>
		</dependency>
		<!-- For reading xlsx files -->
		<dependency>
			<groupId>org.apache.poi</groupId>
			<artifactId>poi</artifactId>
			<version>${version.apache.poi}</version>
		</dependency>
		<dependency>
			<groupId>org.apache.poi</groupId>
			<artifactId>poi-ooxml</artifactId>
			<version>${version.apache.poi}</version>
		</dependency>
		<dependency>
			<groupId>org.apache.poi</groupId>
			<artifactId>poi-ooxml-schemas</artifactId>
			<version>${version.apache.poi}</version>
		</dependency>
		<!-- for word and pdf converter -->
		<!-- 
		<dependency>
			<groupId>org.apache.poi</groupId>
			<artifactId>poi-scratchpad</artifactId>
			<version>${version.apache.poi}</version>
		</dependency>
		 -->
		<dependency>
			<groupId>com.newrelic.agent.java</groupId>
			<artifactId>newrelic-java</artifactId>
			<version>3.15.0</version>
			<scope>provided</scope>
			<type>zip</type>
		</dependency>
		<!-- 
		<dependency>
			<groupId>com.googlecode.ez-vcard</groupId>
			<artifactId>ez-vcard</artifactId>
			<version>0.9.6</version>
		</dependency>
		 -->
		<dependency>
			<groupId>org.mnode.ical4j</groupId>
			<artifactId>ical4j</artifactId>
			<version>2.0-alpha1</version>
		</dependency>
		<dependency>
			<groupId>net.sf.ehcache</groupId>
			<artifactId>ehcache</artifactId>
			<version>2.10.0</version>
		</dependency>
		<dependency>
			<groupId>org.passay</groupId>
			<artifactId>passay</artifactId>
			<version>1.1.0</version>
		</dependency>

		<!-- TEST dependencies -->
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-test</artifactId>
			<version>${version.spring}</version>
			<scope>test</scope>
		</dependency>
		<!-- Needed for running tests (you may also use TestNG) -->
		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<version>4.11</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.mockito</groupId>
			<artifactId>mockito-all</artifactId>
			<version>1.9.5</version>
			<scope>test</scope>
		</dependency>
		<!-- Add cglib for the MemberDaoTest -->
		<dependency>
			<groupId>cglib</groupId>
			<artifactId>cglib-nodep</artifactId>
			<version>2.2</version>
			<scope>test</scope>
		</dependency>
		<!-- Add H2 dependency for embedded testing database -->
		<dependency>
			<groupId>com.h2database</groupId>
			<artifactId>h2</artifactId>
			<version>1.4.186</version>
			<scope>test</scope>
		</dependency>
		<!-- Spring boot for local testing only -->
		<!-- <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-web</artifactId> 
			</dependency> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-tomcat</artifactId> 
			<scope>provided</scope> </dependency> <dependency> <groupId>org.apache.tomcat.embed</groupId> 
			<artifactId>tomcat-embed-jasper</artifactId> <scope>provided</scope> </dependency> 
			<dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-test</artifactId> 
			<scope>test</scope> </dependency> -->
	</dependencies>

	<build>
		<finalName>sportsteam</finalName>

		<pluginManagement>
			<plugins>
				<!-- Force Java 7 -->
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-compiler-plugin</artifactId>
					<version>3.2</version>
					<configuration>
						<source>${maven.compiler.source}</source>
						<target>${maven.compiler.target}</target>
					</configuration>
				</plugin>
				<!-- Deployent on AS from console -->
				<!-- <plugin> <groupId>org.jboss.as.plugins</groupId> <artifactId>jboss-as-maven-plugin</artifactId> 
					<version>${version.jboss.as.maven.plugin}</version> </plugin> -->
				<!-- Surefire plugin before 2.9 version is buggy -->
				<plugin>
					<artifactId>maven-surefire-plugin</artifactId>
					<version>2.18.1</version>
				</plugin>
				<!-- <plugin> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-maven-plugin</artifactId> 
					<version>1.2.0.RELEASE</version> </plugin> -->
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-dependency-plugin</artifactId>
					<version>2.10</version>
					<executions>
						<execution>
							<id>unpack-zip</id>
							<phase>prepare-package</phase>
							<goals>
								<goal>unpack-dependencies</goal>
							</goals>
							<configuration>
								<artifactItems>
									<artifactItem>
										<groupId>com.newrelic.agent.java</groupId>
										<artifactId>newrelic-java</artifactId>
										<version>3.15.0</version>
										<type>zip</type>
										<overWrite>true</overWrite>
										<outputDirectory>${project.build.directory}</outputDirectory>
										<destFileName>newrelic</destFileName>
									</artifactItem>
								</artifactItems>
								<outputDirectory>${project.build.directory}</outputDirectory>
								<includeArtifactIds>newrelic-java</includeArtifactIds>
								<overWriteReleases>false</overWriteReleases>
								<overWriteSnapshots>true</overWriteSnapshots>
							</configuration>
						</execution>
					</executions>
				</plugin>
				<plugin>
					<groupId>org.apache.tomcat.maven</groupId>
					<artifactId>tomcat7-maven-plugin</artifactId>
					<version>2.3-SNAPSHOT</version>
				</plugin>
				<plugin>
					<groupId>org.liquibase</groupId>
					<artifactId>liquibase-maven-plugin</artifactId>
					<version>${version.liquibase}</version>
					<configuration>
						<changeLogFile>database/liquibase/changelog/sportsteam-master-release-2015-08-22.xml</changeLogFile>
						<driver>${db.driver}</driver>
						<url>${db.url}</url>
						<username>${db.username}</username>
						<password>${db.password}</password>
					</configuration>
					<executions>
						<execution>
							<phase>process-resources</phase>
							<goals>
								<goal>update</goal>
							</goals>
						</execution>
					</executions>
				</plugin>
				<!-- Import external wsdl and generate classes -->
				<plugin>
					<groupId>org.codehaus.mojo</groupId>
					<artifactId>jaxb2-maven-plugin</artifactId>
					<version>2.2</version>
					<executions>
						<execution>
							<id>xjc</id>
							<goals>
								<goal>xjc</goal>
							</goals>
						</execution>
					</executions>
					<configuration>
						<!-- Package to store the generated file -->
						<!-- <packageName>com.mobileworks</packageName> -->
						<!-- Treat the input as WSDL -->
						<!-- <wsdl>true</wsdl> -->
						<!-- Input is not XML schema -->
						<xmlschema>false</xmlschema>
						<!-- The location of the WSDL file -->
						<schemaDirectory>${project.basedir}/src/main/resources/external/wsdl</schemaDirectory>
						<!-- The WSDL file that you saved earlier (http://www.smsglobal.com/mobileworks/soapserver.php?wsdl) -->
						<schemaFiles>smsglobal-2015-09-13.xsd</schemaFiles>
						<!-- The output directory to store the generated Java files -->
						<outputDirectory>${project.basedir}/target/generated-sources/jaxb/</outputDirectory>
						<!-- Don't clear output directory on each run -->
						<clearOutputDir>true</clearOutputDir>
						<encoding>UTF-8</encoding>
						<laxSchemaValidation>true</laxSchemaValidation>
						<!-- <catalog>${project.basedir}/src/main/resources/external/wsdl</catalog> -->
					</configuration>
				</plugin>
				<plugin>
					<groupId>org.codehaus.mojo</groupId>
					<artifactId>build-helper-maven-plugin</artifactId>
					<version>1.9.1</version>
					<executions>
						<execution>
							<id>add-smsglobal-source</id>
							<phase>generate-sources</phase>
							<goals>
								<goal>add-source</goal>
							</goals>
							<configuration>
								<sources>
									<source>${project.basedir}/target/generated-sources/jaxb/</source>
								</sources>
							</configuration>
						</execution>
					</executions>
				</plugin>
			</plugins>
		</pluginManagement>
	</build>

	<reporting>
		<plugins>
			<!-- Normally, we take off the dependency report, saves time. -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-project-info-reports-plugin</artifactId>
				<version>2.8</version>
				<configuration>
					<dependencyLocationsEnabled>false</dependencyLocationsEnabled>
				</configuration>
			</plugin>

			<!-- integrate maven-cobertura-plugin to project site -->
			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>cobertura-maven-plugin</artifactId>
				<version>2.7</version>
				<configuration>
					<formats>
						<format>html</format>
						<format>xml</format>
					</formats>
				</configuration>
			</plugin>

		</plugins>
	</reporting>

	<profiles>
		<profile>
			<!-- When built in OpenShift the 'openshift' profile will be used when 
				invoking mvn. -->
			<!-- Use this profile for any OpenShift specific customization your app 
				will need. -->
			<!-- By default that is to put the resulting archive into the 'webapps' 
				folder. -->
			<!-- http://maven.apache.org/guides/mini/guide-building-for-different-environments.html -->
			<id>openshift</id>
			<build>
				<plugins>
					<plugin>
						<artifactId>maven-war-plugin</artifactId>
						<version>2.6</version>
						<configuration>
							<outputDirectory>webapps</outputDirectory>
							<warName>ROOT</warName>
							<webResources>
								<resource>
									<directory>${basedir}/src/main/webapp/WEB-INF</directory>
									<filtering>true</filtering>
									<targetPath>WEB-INF</targetPath>
									<includes>
										<include>**/web.xml</include>
									</includes>
								</resource>
							</webResources>
						</configuration>
					</plugin>
				</plugins>
			</build>
		</profile>

		<profile>
			<id>DBSystemTest</id>
			<properties>
				<db.driver>com.mysql.jdbc.Driver</db.driver>
				<db.url>jdbc:mysql://localhost:3306/sportsteam</db.url>
				<db.username>root</db.username>
				<db.password>mysql</db.password>
			</properties>
		</profile>

		<profile>
			<id>DBProd</id>
			<properties>
				<db.driver>com.mysql.jdbc.Driver</db.driver>
				<db.url>jdbc:mysql://127.9.127.2:3306/sportsteam</db.url>
				<db.username>web</db.username>
				<db.password>wEbt0t3</db.password>
			</properties>
		</profile>

	</profiles>

	<repositories>
		<repository>
			<id>eap</id>
			<url>http://maven.repository.redhat.com/techpreview/all</url>
			<releases>
				<enabled>true</enabled>
			</releases>
			<snapshots>
				<enabled>true</enabled>
			</snapshots>
		</repository>
	</repositories>
	<pluginRepositories>
		<pluginRepository>
			<id>eap</id>
			<url>http://maven.repository.redhat.com/techpreview/all</url>
			<releases>
				<enabled>true</enabled>
			</releases>
			<snapshots>
				<enabled>true</enabled>
			</snapshots>
		</pluginRepository>
	</pluginRepositories>

</project>
